// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Building {
    id Int @id @default(autoincrement())
    name String
    rooms Room[]
}

model Room {
    id Int @id @default(autoincrement())
    name String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    lectures Lecture[]
    buildingId Int
    building Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)
    @@index([name])
}

model Teacher {
    id Int @id @default(autoincrement())
    name String
    lectures Lecture[]
}

model StudentGroup {
    id Int @id @default(autoincrement())
    name String
    lecture Lecture[]
}

model Lecture {
    id Int @id @default(autoincrement())
    name String
    roomId Int
    teacherId Int
    dayOfWeek String
    evenWeek Boolean
    type String
    startTime String
    endTime String
    studentGroupId Int?
    teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
    room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
    studentGroup StudentGroup? @relation(fields: [studentGroupId], references: [id], onDelete: Cascade)
}

// model Post {
//     id        Int      @id @default(autoincrement())
//     name      String
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     createdBy   User   @relation(fields: [createdById], references: [id])
//     createdById String

//     @@index([name])
// }

// // Necessary for Next auth
// model Account {
//     id                String  @id @default(cuid())
//     userId            String
//     type              String
//     provider          String
//     providerAccountId String
//     refresh_token     String? // @db.Text
//     access_token      String? // @db.Text
//     expires_at        Int?
//     token_type        String?
//     scope             String?
//     id_token          String? // @db.Text
//     session_state     String?
//     user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@unique([provider, providerAccountId])
// }

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model User {
//     id            String    @id @default(cuid())
//     name          String?
//     email         String?   @unique
//     emailVerified DateTime?
//     image         String?
//     accounts      Account[]
//     sessions      Session[]
//     posts         Post[]
// }

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }
